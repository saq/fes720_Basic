- Class: meta
  Course: fes720_Basic
  Lesson: Lists
  Author: Simon Queenborough
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: In this lesson, you will learn about lists, how to create, modify, and access various parts of them.
  
- Class: text
  Output: "We have already worked with one-dimensional objects: vectors; and two-dimensional objects: matrices and dataframes. Lists
    extend these ideas to more dimensions ... Lists are recursive and hierarchical like trees or wardrobes: complex hierarchical objects."
  
- Class: text
  Output: "Lists are useful for storing different kinds of objects, such as the output of statistical models. Lists can be accessed in very
    similar ways to how you have accessed vector, matrix, and dataframe elements."
  
- Class: cmd_question
  Output: "OK, so let's get going. First, create a vector of the integers 1, 2, and 3. Make sure that you use c() and do not 
    assign it to any variable name."
  CorrectAnswer: c(1, 2, 3)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3)')
  Hint: "Type: c(1, 2, 3)"
  
  
- Class: cmd_question
  Output: "OK, so we just made a simple vector. Now, we can create a list very easily with 
    the list() function. Try listc(1, 2, 3)."
  CorrectAnswer: list(1, 2, 3)
  AnswerTests: omnitest(correctExpr='list(1, 2, 3)')
  Hint: "Type: list(1, 2, 3)"

- Class: text
  Output: "You should have both the vector and the list displayed on your Console screen now. 
    We can compare them: What do they look like and how do they differ?"

- Class: text
  Output: "There is a clear difference between the vector and the list. The vector displays the
   three numbers on a single line; these are all in one vector with three elements. The list is showing
   a very different structure. First, it has three sections identified by double brackets ([[i]]), each 
   followed by a single number with single brackets ([i]). What do these mean?"
   
- Class: text
  Output: "As usual, single brackets indicate element position. Thus, in the first vector, there are 
    three elements, and the first element is 1. In the list, there are three sections ([[1]], [[2]], 
    and [[3]]), and each has a different
    first element, 1, 2, or 3, depending on which part of the list you look at."
  
- Class: text
  Output: "Does that make sense? Please ask if not, and it should also become clearer as we make some
    more lists"

- Class: cmd_question
  Output: "OK, you should understand the basic structure of lists. 
    Now make a simple list of three integers, and assign it to the name 'x'"
  CorrectAnswer: x <- list(1, 2, 3)
  AnswerTests: omnitest(correctExpr='x <- list(1, 2, 3)')
  Hint: "Type: x <- list(1, 2, 3)"

- Class: cmd_question
  Output: Now, look at the structure of x.
  CorrectAnswer: str(x)
  AnswerTests: omnitest(correctExpr='str(x)')
  Hint: "Type: str(x)"

- Class: text
  Output: "Using str() is a bit more useful that just displaying the raw list itself. Here
    you can see there it is, really, a list, with three parts. Further, we are told what 
    kind of data each part is (all three are numeric in this case), as well as a summary
    of what is in each part (a single integer in each)."

- Class: text
  Output: "We also see something else ... '$ :'!"
  
- Class: text
  Output: "The dollar sign should remind you of a dataframe ... You can see that they are
    also used to indicate parts of the list. We will use them again later."

- Class: cmd_question
  Output: "As usual, we can name parts of this object. First, we can name the main parts
    of the list. We can give each part a name when we first make the list, as with dataframes.
    Try making the same list as above, but give each part a name, a, b, or c, for the first,
    second, and third parts. Call the list 'x_named'"
  CorrectAnswer: x_named <- list(a = 1, b = 2, c = 3)
  AnswerTests: omnitest(correctExpr='x_named <- list(a = 1, b = 2, c = 3)')
  Hint: "Remember that to name a dataframe (or a list), we first give the name, then equals, 
    then what will be in the column of the dataframe or part of the list, e.g., a = 1."
  
- Class: cmd_question
  Output: "Ok, so now display the structure of the new named list, x_named'"
  CorrectAnswer: str(x_named)
  AnswerTests: omnitest(correctExpr='x_named')
  Hint: "Remember str()?"

- Class: text
  Output: "What does this new list look like? Pretty similar to 'x', but with the names
  'a', 'b', and 'c' after the dollar sign for each section. You can also use the names() 
  function to add names to the main parts of the list, as we have done with " 

- Class: text
  Output: "Ok.. so, in class we made a big deal about how lists are great because they can have 
    different kinds of objects within them. Vectors and matrices must be of one class (numeric,
    character, logical, etc); dataframes can contain vectors (i.e., columns) of different class;
    lists can contain different kind of objects (vectors, matrices, dataframes, even other lists!)."

- Class: cmd_question
  Output: 'So, lets make one. Create a list that contains text, an integer, a number, and a 
    logical statement. Type y <- list("a", 1, 1.5, TRUE).'
  CorrectAnswer: y <- list("a", 1, 1.5, TRUE)
  AnswerTests: omnitest(correctExpr='y <- list("a", 1, 1.5, TRUE)')
  Hint: 'Why not type: y <- list("a", 1, 1.5, TRUE).'

- Class: cmd_question
  Output: "Great. Now, let's look at this list ... what is the structure?"
  CorrectAnswer: str(y)
  AnswerTests: omnitest(correctExpr='y')
  Hint: "Remember str()?"
  
- Class: text
  Output: "You can see that each different part is represented, similarly to we saw in 
  'x' and 'x_named'. Here, however, we have the different objects and classes within the 
  list identified. How about putting a list in there, too?"

- Class: cmd_question
  Output: "How do you think we might include a list within a list? Let's begin with
    two small lists: list(1, 2) and list(3, 4). Put these, on their own, into a list, 
    called 'z'."
  CorrectAnswer: z <- list(list(1, 2), list(3, 4))
  AnswerTests: omnitest(correctExpr='z <- list(list(1, 2), list(3, 4))')
  Hint: "Remember to make a list, we use list(). Try putting the two small lists
    inside another list() function."

- Class: cmd_question
  Output: "We can see the structure of 'z' with the str() function."
  CorrectAnswer: str(z)
  AnswerTests: omnitest(correctExpr='z')
  Hint: "Remember str()?"
  
- Class: text
  Output: "So, what did we see there? The main list was clearly identified at the top, as
    usual. Then, within that list, each of the two nested lists was displayed with their 
    constituent parts."

- Class: text
  Output: "Now you know how to make lists, by sticking other objects together within a call
    to list(), with the added bonus of naming each part."

- Class: text
  Output: "Now lets go the other way and start subsetting! Woo hoo!"

- Class: cmd_question
  Output: 'First, let us make a slightly larger list of four parts. 
    include a = 1:3, b = "some text", c = pi, d = list(4,5). Call it z1'
  CorrectAnswer: z1 <- list(a = 1:3, b = "some text", c = pi, d = list(4, 5))
  AnswerTests: omnitest(correctExpr='z1 <- list(a = 1:3, b = "some text", c = pi, d = list(4, 5))')
  Hint: 'Type: z1 <- list(a = 1:3, b = "some text", c = pi, d = list(4, 5))'
  
- Class: cmd_question
  Output: "And, just for kicks, take a look at the structure..."
  CorrectAnswer: str(z1)
  AnswerTests: omnitest(correctExpr='z1')
  Hint: "Remember str()?"
  
- Class: text
  Output: "Now we have our slightly larger list. Let's investigate how we can 
    subset it. We can use single brackets '[ ]', double brackets '[[ ]]', and 
    the dollar sign '$'. Each one selects a different part of the list. Let's see."

- Class: cmd_question
  Output: "First, let's try single brackets. These extract a sub-list, so the result
    will always be a list. Within the single brackets you can use the number or name
    to indicate which parts to select. Try selecting the first part of 'z1' using its 
    position number."
  CorrectAnswer: z1[1]
  AnswerTests: omnitest(correctExpr='z1[1]')
  Hint: "Type: z1[1]"
    
- Class: cmd_question
  Output: "Check that the result is a list. You can do this with str() as before,
    or with the is.list() function. Try that instead."
  CorrectAnswer: is.list(z1[1])
  AnswerTests: omnitest(correctExpr='is.list(z1[1])')
  Hint: "Type: is.list(z1[1])"
    
- Class: cmd_question
  Output: "Now, try subsetting the first part of the list z1 using its name (a). You
    should get the identical output as above."
  CorrectAnswer: z1["a"]
  AnswerTests: omnitest(correctExpr='z1["a"]')
  Hint: 'Type: z1["a"]'

- Class: mult_question
  Output: "Now, let's try subsetting with double brackets '[[ ]]'. Using double
    brackets removes a level of hierarchy from the list. So, if we select the first
    part of 'z1' using double brackets, what should we get as the result?"
  AnswerChoices: a vector;a matrix;a list;a banana
  AnswerTests: omnitest(correctVal = 'a vector')
  Hint: "What kind of object is 'a'?"
  
- Class: cmd_question
  Output: "Let's check that answer! Use double brackets to select 'a' from the list 
    'z1'."
  CorrectAnswer: z1[["a"]]
  AnswerTests: omnitest(correctExpr='z1[["a"]]')
  Hint: 'Type: z1[["a"]]'
  
- Class: text
  Output: "As usual, you can use names or position to subset using double brackets."
  
- Class: text
  Output: "Now we come to the last way to subset out parts of a list: The $!."

- Class: cmd_question
  Output: "The dollar sign works exxactly like double brackets, except that quotes around the
    name are not needed. Try subsetting out part 'a' using '$'."
  CorrectAnswer: z1$a
  AnswerTests: omnitest(correctExpr='z1$a')
  Hint: "Type: z1$a"

- Class: cmd_question
  Output: "Great work! Now you can build and deconstruct lists to your heart's content. Let's practice
    a few times on 'z1' before letting you go on your way. Subset out the first and third parts of 'z1' 
    by name using single brackets."
  CorrectAnswer: z1[c("a", "c")]
  AnswerTests: omnitest(correctExpr='z1[c("a", "c")]')
  Hint: 'Type: z1[c("a", "c")]'
  
- Class: cmd_question
  Output: "Now subset out the last part of 'z1' using single brackets and position number."
  CorrectAnswer: z1[4] 
  AnswerTests: omnitest(correctExpr='z1[4]')
  Hint: "Type: z1[4]"
  
- Class: cmd_question
  Output: "How about subsetting the first part of 'd' within 'z1' using the dollar sign 
    (you will also need some brackets). The result should be another list, or sub-list."
  CorrectAnswer: z1$d[1] 
  AnswerTests: omnitest(correctExpr='z1$d[1]')
  Hint: "Type: z1$d[1]"

- Class: mult_question
  Output: OK. Enough! Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: For reals?!
  CorrectAnswer: For reals?!
  AnswerTests: submit_log()
  Hint: hint



